// Media Queries
// Media of at least the minimum breakpoint width. (No query for the smallest breakpoint)
// Usage example: @include breakpoint(sm) {}
@mixin breakpoint($name, $bp: $breakpoints) {
	$min: breakpoint-min($name, $bp);
	@if $min {
		@media (min-width: $min) {
			@content;
		}
	}
	@else {
		@content;
	}
}

// Media of at most the maximum breakpoint width, applies to the given breakpoint and narrower. (No query for the largest breakpoint)
@mixin breakpoint-down($name, $bp: $breakpoints) {
	$max: breakpoint-max($name, $bp);
	@if $max {
		@media (max-width: $max) {
			@content;
		}
	}
	@else {
		@content;
	}
}

// Media between the breakpoint's minimum and maximum widths, applies only to the given breakpoint. (No minimum for the smallest breakpoint, and no maximum for the largest one)
@mixin breakpoint-only($name, $bp: $breakpoints) {
	@include breakpoint($name, $bp) {
		@include breakpoint-down($name, $bp) {
			@content;
		}
	}
}

// Media that spans multiple breakpoint widths. @content applies between the min and max breakpoints
@mixin breakpoint-between($lower, $upper, $bp: $breakpoints) {
	@include breakpoint($lower, $bp) {
		@include breakpoint-down($upper, $bp) {
			@content;
		}
	}
}

// Positioning
@mixin center-block($dis: block) {
	display: $dis;
	margin-left: auto;
	margin-right: auto;
}

@mixin horizontal-center($pos: absolute) {
	position: $pos;
	left: 50%;
	transform: translateX(-50%);
}

@mixin vertical-center($pos: absolute) {
	position: $pos;
	top: 50%;
	transform: translateY(-50%);
}

@mixin absolute-center($pos: absolute) {
	position: $pos;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}

// Utilities
// CSS image replacement
@mixin text-hide {
	font-size: 0;
	line-height: 0;
	color: transparent;
	text-shadow: none;
	background-color: transparent;
	border: 0;
}

@mixin clearfix {
	&::after {
		content: '';
		display: table;
		clear: both;
	}
}

@mixin hover-focus {
	&:focus,
	&:hover {
		@content;
	}
}

// Using a pseudo element to contain an image
@mixin pseudo-img($pos: absolute) {
	content: '';
	background-repeat: no-repeat;
	display: block;
	position: $pos;
}

@mixin aspect-ratio($width, $height) {
	position: relative;
	padding-bottom: $height / $width * 100%;
	img,
	video,
	iframe,
	object,
	embed {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
	}
}

@mixin bs-column-padding($padding: $grid-gutter-width / 2) {
	padding: {
		left: $padding;
		right: $padding;
	}
}

@mixin bs-column($pos: relative) {
	position: $pos;
	min-height: .1rem;
	@include bs-column-padding;
}

@mixin bs-row($clearfix: true) {
	margin-left: -$grid-gutter-width / 2;
	margin-right: -$grid-gutter-width / 2;
	@if $clearfix==true {
		@include clearfix;
	}
}

@mixin bs-row-reset {
	margin: 0;
	&::before,
	&::after {
		display: none;
	}
}

@mixin btn-default {
	background-color: $lt-blue;
	background-image: none;
	border: 0;
	border-radius: $btn-border-radius-base;
	color: #fff;
	font-size: 1.9rem;
	text-transform: uppercase;
	color: #fff;
	&:hover,
	&:active,
	&:focus,
	&:active:focus,
	&:active:hover {
		background-color: $md-blue;
		color: #fff;
	}
	&:active {
		color: #fff;
		&:focus,
		&:hover {
			color: #fff;
		}
	}
	&:focus {
		outline-color: $yellow;
	}
}

@mixin button-variant($color, $background, $border) {
	color: $color;
	background-color: $background;
	border-color: $border;
	&:focus,
	&.focus {
		color: $color;
		background-color: darken($background, 10%);
		border-color: darken($border, 25%);
	}
	&:hover {
		color: $color;
		background-color: darken($background, 10%);
		border-color: darken($border, 12%);
	}
	&:active,
	&.active,
	.open>&.dropdown-toggle {
		color: $color;
		background-color: darken($background, 10%);
		border-color: darken($border, 12%);
		&:hover,
		&:focus,
		&.focus {
			color: $color;
			background-color: darken($background, 17%);
			border-color: darken($border, 25%);
		}
	}
	&:active,
	&.active,
	.open>&.dropdown-toggle {
		background-image: none;
	}
	&.disabled,
	&[disabled],
	fieldset[disabled] & {
		&:hover,
		&:focus,
		&.focus {
			background-color: $background;
			border-color: $border;
		}
	}
	.badge {
		color: $background;
		background-color: $color;
	}
}

@mixin btn-primary {
	// $color, $background, $border
	@include button-variant(#fff, $bright-orange, $tangerine);
	background-image: linear-gradient(to bottom, $lt-orange, $bright-orange);
	border-width: 0.1rem;
	border-radius: $btn-border-radius-base;
	text-shadow: 0.1rem 0.1rem 0.3rem #888;
	font-weight: bold;
	font-size: 1.9rem;
	text-transform: uppercase;
}

@mixin aem-authoring {
	@at-root {
		/* Temporary styles for display while authoring, remove for prod */
	}
	.aem-AuthorLayer-Layouting &,
	.aem-AuthorLayer-Edit & {
		@content;
	}
}

@mixin gradient-text-blue($fallback-color: $lt-blue, $start-color: #4ab3f1, $end-color: $md-blue) {
  color: $fallback-color;
  background-image: none;

  // @supports should be avoided but so should -webkit-background-clip
  @supports (
  	( (-webkit-background-clip: text) or (background-clip: text) ) and
  	( (-webkit-text-fill-color: transparent) or (text-fill-color: transparent) )
	) {
    -webkit-text-fill-color: transparent;
    text-fill-color: transparent;
    -webkit-background-clip: text;
    background-clip: text;
    background-repeat: repeat-x;
    background-image: linear-gradient(to bottom, $start-color 0, $end-color 100%);
  }
}
