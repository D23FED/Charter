// Convert pixels => ems
/// Removes the unit (e.g. px, em, rem) from a value, returning the number only.
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// @function em($pixels, $base: 16) {
// 	@return ($pixels / $base) * 1em;
// }

/// Converts one or more pixel values into matching rem values.
/// @param {Number|List} $values - One or more values to convert. Be sure to separate them with spaces and not commas. If you need to convert a comma-separated list, wrap the list in parentheses.
/// @param {Number} $base [null] - The base value to use when calculating the `rem`. If you're using Foundation out of the box, this is 16px. If this parameter is `null`, the function will reference the `$base-font-size` variable as the base.
/// @returns {List} A list of converted values.

// @function rem-calc($values, $base: null) {
// 	$rem-values: ();
// 	$count: length($values);
//   // If no base is defined, defer to the global font size
//   @if $base == null {
//     $base: 16px;
//   }
//   // If the base font size is a %, then multiply it by 16px
//   // This is because 100% font size = 16px in most all browsers
//   @if unit($base) == '%' {
//     $base: ($base / 100%) * 16px;
//   }
//   // Using rem as base allows correct scaling
//   @if unit($base) == 'rem' {
//     $base: strip-unit($base) * 16px;
//   }

//   @if $count == 1 {
//     @return -zf-to-rem($values, $base);
//   }

//   @for $i from 1 through $count {
//     $rem-values: append($rem-values, -zf-to-rem(nth($values, $i), $base));
//   }

//   @return $rem-values;
// }

// Converts a unitless, pixel, or rem value to em, for use in breakpoints.

// @function -zf-bp-to-em($value) {
//   // Pixel and unitless values are converted to rems
//   @if unit($value) == 'px' or unitless($value) {
//     $value: rem-calc($value, $base: 16px);
//   }
//   // Then the value is converted to ems
//   @return strip-unit($value) * 1em;
// }

/// Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value. By default, the base pixel value used to calculate the rem value is taken from the `$global-font-size` variable.

// @function -zf-to-rem($value, $base: null) {
//   // Check if the value is a number
//   @if type-of($value) != 'number' {
//     @warn inspect($value)+"was passed to rem-calc(), which is not a number.";

//     @return $value;
//   }
//   // Transform em into rem if someone hands over 'em's
//   @if unit($value) == 'em' {
//     $value: strip-unit($value) * 1rem;
//   }
//   // Calculate rem if units for $value is not rem or em
//   @if unit($value) != 'rem' {
//     $value: strip-unit($value) / strip-unit($base) * 1rem;
//   }
//   // Turn 0rem into 0
//   @if $value == 0rem {
//     $value: 0;
//   }

//   @return $value;
// }

// ----------------
// Breakpoint viewport sizes and media queries.
// --------------------------------------------
// From Bootstrap 4: -next, -min, -max, -infix
// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next($name, $breakpoints-list: $breakpoints, $breakpoint-names: map-keys($breakpoints-list)) {
	$n: index($breakpoint-names, $name);
	@return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}
// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints-list: $breakpoints) {
	$min: map-get($breakpoints-list, $name);
	@return if($min !=0, $min, null);
}
// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.1.
//
//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767px
@function breakpoint-max($name, $breakpoints-list: $breakpoints) {
	$next: breakpoint-next($name, $breakpoints-list);
	@return if($next, breakpoint-min($next, $breakpoints-list) - 1px, null);
}
// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    "-sm"
@function breakpoint-infix($name, $breakpoints-list: $breakpoints) {
	@return if(breakpoint-min($name, $breakpoints-list)==null, "", "-#{$name}");
}

